plugins {
    id 'java-library'
    id 'idea'
    id 'signing'
    id 'maven-publish'
}

import org.gradle.internal.os.OperatingSystem

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

group projGroupId
archivesBaseName = projArtifactId
version = projVersion

if (Boolean.parseBoolean(System.getProperty("project.bindAllNative"))) {
    project.ext.lwjglNatives = [
        'linux-arm32', 'linux-arm64', 'linux',
        'macos-arm64', 'macos',
        'windows-arm64', 'windows-x86', 'windows'
    ]
} else {
    def osArch = System.getProperty("os.arch")
    switch (OperatingSystem.current()) {
        case OperatingSystem.LINUX:
            project.ext.lwjglNatives = [osArch.startsWith("arm") || osArch.startsWith("aarch64")
                ? "linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
                : "linux"]
            break
        case OperatingSystem.MAC_OS:
            project.ext.lwjglNatives = [osArch.startsWith("aarch64") ? "macos-arm64" : "macos"]
            break
        case OperatingSystem.WINDOWS:
            project.ext.lwjglNatives = [osArch.contains("64")
                ? "windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                : "windows-x86"]
            break
    }
}

repositories {
    mavenCentral()
    maven { url 'https://maven.aliyun.com/repository/central' }
    // temporary maven repositories
    maven { url 'https://s01.oss.sonatype.org/content/repositories/releases' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {
    api 'org.joml:joml:1.10.4'
    api 'org.slf4j:slf4j-api:2.0.0-alpha7'

    compileOnly 'org.jetbrains:annotations:23.0.0'
    testCompileOnly 'org.jetbrains:annotations:23.0.0'

    testCompileOnly 'org.slf4j:slf4j-simple:2.0.0-alpha7'
    api platform("org.lwjgl:lwjgl-bom:3.3.1")

    for (String depend in ['', '-glfw', '-opengl', '-stb', '-jemalloc', '-assimp']) {
        api "org.lwjgl:lwjgl$depend"
        for (String platform in lwjglNatives) {
            testRuntimeOnly "org.lwjgl:lwjgl$depend::natives-$platform"
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jar {
    manifestContentCharset 'utf-8'
    metadataCharset 'utf-8'
    from 'LICENSE', 'changelog.txt'
    manifest.attributes(
        'Specification-Title': projName,
        'Specification-Vendor': 'Overrun Organization',
        'Specification-Version': '0',
        'Implementation-Title': projName,
        'Implementation-Vendor': 'Overrun Organization',
        'Implementation-Version': archiveVersion
    )
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set 'sources'
    from sourceSets.main.allSource, 'LICENSE', 'changelog.txt'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set 'javadoc'
    from javadoc, 'LICENSE', 'changelog.txt'
}

artifacts {
    archives javadocJar, sourcesJar
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    failOnError = false
    options.encoding 'UTF-8'
    options.charSet 'UTF-8'
    options.author true
    options.links 'https://docs.oracle.com/en/java/javase/17/docs/api/'
    options.windowTitle "$projName $projVersion Javadoc"
}

publishing.publications {
    mavenJava(MavenPublication) {
        groupId = projGroupId
        artifactId = projArtifactId
        version = projVersion
        description = projDesc
        from components.java
        pom {
            name = projName
            description = projDesc
            url = "https://github.com/$projVcs"
            licenses {
                license {
                    name = 'The MIT License'
                    url = "https://raw.githubusercontent.com/$projVcs/$projBranch/LICENSE"
                }
            }
            organization {
                name = orgName
                url = orgUrl
            }
            developers {
                String[] prop = project.developers.split(',')
                for (String s : prop) {
                    String[] dev = s.split(':', 3)
                    developer {
                        id = dev[0]
                        name = dev[1]
                        email = dev[2]
                    }
                }
            }
            scm {
                connection = "https://github.com/${projVcs}.git"
                developerConnection = "https://github.com/${projVcs}.git"
                url = "https://github.com/$projVcs"
            }
        }
    }
}
// You have to 'OSSRH_USERNAME', 'OSSRH_PASSWORD', 'signing.keyId',
// 'signing.password' and 'signing.secretKeyRingFile' to
// GRADLE_USER_HOME/gradle.properties
publishing.repositories {
    maven {
        name = "OSSRH"
        credentials {
            username project.OSSRH_USERNAME
            password project.OSSRH_PASSWORD
        }
        url = version.endsWith('-SNAPSHOT')
            ? 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            : 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
    }
}

signing {
    if (Boolean.parseBoolean(System.getProperty("gpg.signing", "true")))
        sign publishing.publications.mavenJava
}

idea.module.inheritOutputDirs = true
